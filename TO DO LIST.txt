
o Create the main menu.

o Add a megaman style explode animation
to the character when something fell on him.

o Add the animations

o Imp. column upper - NEXT (1).

o Have the objective of the game be to 
get the highest block chain. There are
2 main conditions in this game:

	- Getting the longest block
	chain automatically puts you
	in the lead.

	- But, Ultimately the person
	with the highest score
	wins. You can increase
	your score by getting matches
	and combo's. As for chains,
	they work on a multiplier, 
	of which the formula is:

	(how_many_blocks * .25)^5 = how many points you earn.

	//so for example:
		//16 blocks
		(16 * .25)^5 = 1024;

o Tables the DB will have:

	- Simon_LB

	- Solo_LB (this is the game mode we have
	now)

o ONLINE:

	- When your in the waiting room, have it 
	send more requests than it would when it's
	playing. 

	- Use Bcrypt for passwords.	

	- Make a funct that removes a player who hasn't contacted
	the server in the past 30 secs (create a function
	in unity that reaches out to the server, and a method 
	in Node that documents the time the request was
	processed.) - CURRENTLY

o Add the button mashing to the boxers
ultimate - NEXT(1) 


o Maybe after the Initial release, allow direct peer to 
peer matches, this could be accomplised by creating
a P2P table in the DB and using the string method
that we scrapped eariler.

o Sometime in the future update the site and add:

	o Option to upload profile pic.

	o Add news column

	o Add a profile section that allows
	you to see your wins/losses.

o Make a game over screen,

o Make it so that the when the column
reaches a certain number, the column
deletes it's blocks, restaring (NEXT [1]).

o allow loss screen to send results (NOW)

o Have a button on the loss screen that
redirects to the char select screen 
that still goes to the online scene, 
but have the online scene not load
the login box if the user is already 
logged in, just go straight to waiting room.(NEXT [2]).

o Make it so when you lose the game sends
a call to /send_result (this is a post request), 
and have the parameters be username, pass, [win/loss in string].

And once the request has resolved then goto the loss
screen (this is the screen that shows you're place, 
final score, etc.) 

o make a gameover animation by deleting
the ground beneath the blocks to create
a falling effect (NEXT [2]).

o To fix last man standing, give it a countdown
of 10 mins, and if you're both still alive
then highest score wins (NEXT [3]).

o  Add pause.

o Finish box's ultimate (NEXT).

o (LATER, AFTER RELEASE) create a dictionary object, initially
set it as empty. this will be a dict that
tracks how many blocks are touching each other, for ex:
{red: 4, //this means 4 reds are touching in the column
blue: 0,
etc...}

And only renew/update with new values this object when a 
function (UP_Dict maybe) is called by a block that was destroyed
in that column. The freshly updated version will now be 
used as a pre-state of sorts, and make the blocks no longer
have the time window float for touching after a detonation, 
have the column handle it by setting self check on its blocks
to true if the state has change from previous, so for example:
after a blow up, the state has yellows touching as 0 ({yell: 0...})
but after a few seconds, 2 yellows touch ({yell: 2}), now this
will trigger the column to call check() on the designated blocks (think
of the for loop that looks for blocks above the exploded one, this
is an array of those above blocks)

o Add puzzle creator mode.

o Implement quick jab for box. It's the one 
that reshuffles the order of the blocks. 
we can achieve this by setting up 2 raycasts
on the block that was punched, have 1 that
points all the way up for 3 blocks, and all
the way left. So here's the algo:

Set up left ray casts on ALL blocks, the
upper blocks and the punched block, create
an array **ON** the punched block and return 
the results of teh left raycast to the 
punched block, now we have a huge array
of blocks. We can now shake them, find
2 random blocks in the array, swap em, 
remove em, keep repeating till it's
empty. (NEXT [2])

o TELL PEOPLE HOW THEY CAN DO
DIFFERENT THINGS WITH THE PAINTER (FORMELY
CALLED SPIDER), such as, exploding one ajancent
block (left or right), then deploying which
will give a wierd effect.




